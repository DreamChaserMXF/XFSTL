一、
对于四种迭代器的继承关系：
const_iterator  iterator
reverse_const_iterator reverse_iterator

1. 一开始想的是 const_iterator作为基类，iterator从const_iterator派生出即可，只要重写解引用的函数就行。reverse_const_iterator也从const_iterator派生出，重写=-操作符就可以。
后来，一方面是发现了另一种继承关系，即input_iterator, output_iterator, forward_iterator，biderectional_iterator和randomaccess_iterator。觉得这样的继承关系更容易理解一些。
另一方面，发现iterator继承const_iterator后，不仅要重写解引用，还要重写=-等等函数（因为返回值不同）。所以，现在打算摒弃最开始的继承关系，换用网上查到，第二种继承关系。
对于reverse迭代器，可以在正向迭代器的基础上继承而来。
对于const迭代器，初步打算使其平行于一般迭代器，同样有那么一套继承关系。而对const与非const迭代器，在每一层的继承关系上，都重写一个类型转换的函数，使非const迭代器可以直接转换为同层次的const迭代器。


2. 后来发现，网上的input_iterator和output_iterator两个类一起根本没办法派生出子类（未验证）。而看了STL的源码后发现也没这种关系。
而且，因为迭代器是容器与算法的桥梁，所以必须要清楚容器的内部实现。所以对每个容器，可能都需要编写它们各自的迭代器。

关于迭代器的继承关系，iterator中的指针是一般指针，const_iterator中的指针是常量指针，如果通过从const_iterator继承来实现iterator的话，那么，每次iterator的函数的返回值，可能都需要去除const_iterator中常量指针的常量属性，非常麻烦。

3. 所以把这两个类分开，各自独立实现。
在类型转换上，由于要将iterator透明地转换为const_iterator，所以要提供类型转换的途径。
有两个思路，一个是对const_iterator定义参数为iterator的构造函数，另一个是在iterator中实现专门的类型转换操作符。
前者要使用iterator中的指针（私有成员），要将const_iterator声明为iterator的友元，很麻烦。所以用后者来实现。利用iterator的指针来初始化const_iterator对象即可。

对于reverse_iterator，实现了一个类模板，只要将任一种iterator作为该类模板的参数，便可得到+-效果相反的reverse_iterator


二、常量迭代器类中的元素指针设计为public
原因：
	在vector中，常需要const_iterator作为位置标记。在使用时，常常要根据位置计算偏移量。然而，如果无法访问迭代器的指针的话，就找不到const_iterator对象具体指向的位置了。
	然而，iterator却不需要将元素指针设计为public，原因就是无须使用iterator来标记位置。
三、反向迭代器类中的迭代器对象设计为public
原因：
	在reverse_iterator中，对不同模板参数实例化的不同的reverse_iterator类的转换中，要先还原出模板参数的对象，再转换成另一个reverse_iterator的模板参数类的对象，再转换为reverse_iterator
常用于reverse_iterator向const_reverse_iterator的转换。
问题在于，当rever_iterator指向list的tail_元素时，在“还原出模板参数的对象”步骤，会将reverse_iterator中的iterator对象指向tail_元素的下一个元素，此时下一个元素是NULL。之后，再对NULL解引用时出错。

所以将reverse_iterator中的iterator对象设为public变量，不严格还原模板参数对象，而是直接转换iterator对象即可。

四、迭代器类一定要定义value_type，否则，在实现算法时，只有迭代器参数，而不知道值类型的话，无法申请临时变量，也就无法进行两个元素的交换。
哦不，其实只要定义pointer类型就可以了，可以通过NULL转为pointer类型，再解引用，获得value_type
类似地，迭代器类一定要用typedef指定iterator_category类型，这样才能针对不同标签的迭代器提供个性化的高效操作


五、deque中，首个和末个bin的有效区段标号
首个bin的有效区段为[front_bin_index_, SEGMENT_LENGTH)
末个bin的有效区段为[0, back_bin_index_)
在计算size()时，由于front_bin_index_与back_bin_index_的默认值(0, SEGMENT_LENGTH-1)，故当map_长度为0或1时，计算出的都是正确的长度，无须特殊处理
在执行push_front与push_back时，也无须特殊处理

【问题是】当map_长度为1时，front_bin_index_与back_bin_index_表示同一个bin，这时会造成什么影响？
在拷贝构造函数与析构函数中，需要对map_为1时进行特殊判断：若其中任意一个不为默认值，则视作其有效。若两个都是默认值，则可视作任意一个有效

六、有关_Deque_Const_Iterator中map_iter_的类型定义
在_Deque_Const_Iterator中，map_iter_本应定义为vector<pointer>::const_iterator，但由于pointer是const T*，当从_Deque_Iterator向_Deque_Const_Iterator转换时，要把_Deque_Iterator中的vector<pointer>对象转换为_Deque_Const_Iterator类的vector<pointer>对象。但这后者中的pointer有const修饰，该对象无法正常转换。故修改map_iter_的类型定义，使其类型为vector<T*>::const_iterator类型，移除了const属性，失去了对其T对象的const保护。但如果不这样做的话，在前述转换过程中，就要用更为底层的转换机制。